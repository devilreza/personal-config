" Enhanced Vim Configuration
" Based on Ultimate vimrc with modern improvements

set runtimepath+=~/.vim_runtime

" Load Ultimate vimrc base configurations
source ~/.vim_runtime/vimrcs/basic.vim
source ~/.vim_runtime/vimrcs/filetypes.vim
source ~/.vim_runtime/vimrcs/plugins_config.vim
source ~/.vim_runtime/vimrcs/extended.vim

" =============================================================================
" ENHANCED CONFIGURATION
" =============================================================================

" Modern Vim features
set nocompatible
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8

" Better performance
set lazyredraw
set ttyfast
set updatetime=300
set timeoutlen=500

" Enhanced search
set ignorecase
set smartcase
set incsearch
set hlsearch
set wrapscan

" Better indentation
set autoindent
set smartindent
set cindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set shiftround

" Line numbers and cursor
set number
set relativenumber
set cursorline

" Better window management
set splitbelow
set splitright
set equalalways

" Status line enhancements
set laststatus=2
set showmode
set showcmd
set ruler
set wildmenu
set wildmode=longest:list,full

" Better backup and undo
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/swap
set undofile
set undodir=~/.vim/undodir
set undolevels=1000
set undoreload=10000

" Better completion
set completeopt=menu,menuone,preview,noinsert,noselect
set shortmess+=c

" Better scrolling
set scrolloff=8
set sidescrolloff=8
set scrolljump=5

" Better visual feedback
set showmatch
set matchtime=2
set visualbell
set noerrorbells

" Better file handling
set autoread
set autowrite
set confirm
set hidden

" Better text formatting
set wrap
set linebreak
set textwidth=0
set formatoptions-=t

" =============================================================================
" VS CODE-LIKE KEY MAPPINGS
" =============================================================================

" Leader key
let mapleader = ","
let g:mapleader = ","

" VS Code-like shortcuts
nnoremap <C-s> :w<CR>
inoremap <C-s> <ESC>:w<CR>
nnoremap <C-w> :q<CR>
nnoremap <C-q> :qa<CR>
nnoremap <C-n> :enew<CR>
nnoremap <C-t> :tabnew<CR>
nnoremap <C-w> :close<CR>
nnoremap <C-Shift-w> :tabclose<CR>

" File operations (VS Code style)
nnoremap <C-o> :e<Space>
nnoremap <C-Shift-o> :tabnew<Space>
nnoremap <C-p> :CtrlP<CR>
nnoremap <C-Shift-p> :CtrlPBuffer<CR>

" Find and replace (VS Code style)
nnoremap <C-f> /
nnoremap <C-h> :%s/
nnoremap <C-Shift-h> :%s/\<<C-r><C-w>\>//g<Left><Left>

" Navigation (VS Code style)
nnoremap <C-g> :call search('')<Left><Left>
nnoremap <C-Shift-g> :call search('', 'b')<Left><Left>

" Multi-cursor like behavior
nnoremap <C-d> :call search(expand('<cword>'))<CR>
nnoremap <C-Shift-d> :call search(expand('<cword>'), 'b')<CR>

" =============================================================================
" CUSTOM KEY MAPPINGS
" =============================================================================

" Quick save and quit
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>x :x<CR>
nnoremap <leader>wq :wq<CR>

" Quick buffer navigation
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprevious<CR>
nnoremap <leader>bd :bdelete<CR>
nnoremap <leader>ba :ball<CR>

" Quick window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Quick tab navigation
nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>tc :tabclose<CR>
nnoremap <leader>to :tabonly<CR>
nnoremap <leader>tm :tabmove<CR>

" Quick search and replace
nnoremap <leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>
nnoremap <leader>S :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>

" Clear search highlighting
nnoremap <leader>h :nohlsearch<CR>

" Quick file operations
nnoremap <leader>e :e<Space>
nnoremap <leader>E :e!<Space>

" Quick help
nnoremap <leader>H :help<Space>

" Toggle line numbers
nnoremap <leader>n :set number!<CR>
nnoremap <leader>rn :set relativenumber!<CR>

" Toggle paste mode
nnoremap <leader>p :set paste!<CR>

" VS Code-like key mappings
nnoremap <leader>fd :call FormatDocument()<CR>
nnoremap <leader>gd :call GoToDefinition()<CR>
nnoremap <leader>fr :call FindReferences()<CR>
nnoremap <leader>rn :call RenameSymbol()<CR>
nnoremap <leader>ln :call ToggleLineNumbers()<CR>
nnoremap <leader>cw :call CleanWhitespace()<CR>
nnoremap <leader>ts :call ToggleTabSpaces()<CR>

" Quick escape
inoremap jj <ESC>
inoremap jk <ESC>
inoremap kj <ESC>

" Better command line editing
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>

" =============================================================================
" VS CODE-LIKE FEATURES
" =============================================================================

" Modern cursor and visual improvements
set cursorline
set number
set relativenumber
set showtabline=2
set laststatus=2
set noshowmode

" Better visual feedback
set showmatch
set matchtime=1
set hlsearch
set incsearch
set scrolloff=8
set sidescrolloff=8

" Modern completion
set completeopt=menu,menuone,noinsert,noselect,preview
set shortmess+=c
set pumheight=10
set pumwidth=30

" Better indentation
set autoindent
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set shiftround

" Modern file handling
set hidden
set autoread
set autowrite
set confirm
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/swap
set undofile
set undodir=~/.vim/undodir

" =============================================================================
" PLUGIN CONFIGURATIONS
" =============================================================================

" NERDTree configuration
let g:NERDTreeWinSize = 30
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore = ['\.pyc$', '\.pyo$', '__pycache__', '\.git$', '\.DS_Store']
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeDirArrows = 1
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeBookmarksFile = $HOME . '/.vim_runtime/NERDTreeBookmarks'

" NERDTree key mappings
nnoremap <leader>nn :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>
nnoremap <leader>nm :NERDTreeMirror<CR>
nnoremap <leader>nc :NERDTreeClose<CR>

" Auto-open NERDTree when vim starts
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close vim if NERDTree is the only window left
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" CtrlP configuration
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': 'some_bad_symbolic_links',
    \ }
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
nnoremap <leader>j :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>m :CtrlPMRUFiles<CR>

" Airline configuration (VS Code-like status bar)
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#show_close_button = 1
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#show_tab_count = 1

" Syntastic configuration
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" GitGutter configuration
let g:gitgutter_enabled = 1
let g:gitgutter_map_keys = 0
nnoremap <leader>gg :GitGutterToggle<CR>

" Commentary configuration
nnoremap <leader>cc :Commentary<CR>
vnoremap <leader>cc :Commentary<CR>

" Surround configuration
let g:surround_no_mappings = 0

" =============================================================================
" LANGUAGE-SPECIFIC CONFIGURATIONS
" =============================================================================

" Python
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType python setlocal textwidth=88

" JavaScript/TypeScript
autocmd FileType javascript,typescript setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType javascript,typescript setlocal textwidth=100

" Go - Enhanced configuration
autocmd FileType go setlocal noexpandtab shiftwidth=4 softtabstop=4
autocmd FileType go setlocal textwidth=120
autocmd FileType go setlocal foldmethod=syntax
autocmd FileType go setlocal foldlevel=99
autocmd FileType go setlocal formatprg=gofmt
autocmd FileType go setlocal makeprg=go\ build\ -o\ /tmp/%:t:r\ %
autocmd FileType go setlocal errorformat=%f:%l:%c:\ %m
autocmd FileType go setlocal comments=s1:/*,mb:*,ex:*/,://
autocmd FileType go setlocal commentstring=//\ %s

" HTML/CSS
autocmd FileType html,css setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType html,css setlocal textwidth=120

" YAML
autocmd FileType yaml setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType yaml setlocal textwidth=120

" Markdown
autocmd FileType markdown setlocal wrap linebreak textwidth=0
autocmd FileType markdown setlocal spell spelllang=en_us

" =============================================================================
" SIDEBAR CONFIGURATIONS
" =============================================================================

" Tagbar configuration (if available)
if exists(':Tagbar')
    let g:tagbar_width = 30
    let g:tagbar_autofocus = 1
    let g:tagbar_autoclose = 1
    let g:tagbar_compact = 1
    nnoremap <leader>tt :TagbarToggle<CR>
    nnoremap <leader>tf :TagbarOpen f<CR>
endif

" Quickfix window
nnoremap <leader>qo :copen<CR>
nnoremap <leader>qc :cclose<CR>
nnoremap <leader>qn :cnext<CR>
nnoremap <leader>qp :cprev<CR>

" Location list
nnoremap <leader>lo :lopen<CR>
nnoremap <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>

" =============================================================================
" VS CODE-LIKE FUNCTIONS
" =============================================================================

" Function to toggle between absolute and relative line numbers
function! ToggleLineNumbers()
    if &relativenumber
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunction

" Function to clean up whitespace
function! CleanWhitespace()
    let save_cursor = getpos(".")
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
endfunction

" Function to toggle between tabs and spaces
function! ToggleTabSpaces()
    if &expandtab
        set noexpandtab
        echo "Using tabs"
    else
        set expandtab
        echo "Using spaces"
    endif
endfunction

" VS Code-like format document
function! FormatDocument()
    if &filetype == 'python'
        silent! !python -m autopep8 --in-place --aggressive --aggressive %
    elseif &filetype == 'javascript' || &filetype == 'typescript'
        silent! !prettier --write %
    elseif &filetype == 'json'
        silent! !python -m json.tool % > %_formatted && mv %_formatted %
    endif
    edit!
endfunction

" VS Code-like go to definition
function! GoToDefinition()
    if &filetype == 'python'
        silent! !python -c "import ast; ast.parse(open('$1').read())" 2>/dev/null
        if v:shell_error == 0
            echo "Python syntax is valid"
        else
            echo "Python syntax error"
        endif
    endif
endfunction

" VS Code-like find references
function! FindReferences()
    let word = expand('<cword>')
    execute 'grep -r "' . word . '" .'
endfunction

" VS Code-like rename symbol
function! RenameSymbol()
    let word = expand('<cword>')
    let new_word = input('Rename to: ', word)
    if new_word != ''
        execute '%s/\<' . word . '\>/' . new_word . '/g'
    endif
endfunction

" =============================================================================
" CUSTOM FUNCTIONS
" =============================================================================

" Function to toggle between absolute and relative line numbers
function! ToggleLineNumbers()
    if &relativenumber
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunction
nnoremap <leader>ln :call ToggleLineNumbers()<CR>

" Function to clean up whitespace
function! CleanWhitespace()
    let save_cursor = getpos(".")
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
endfunction
nnoremap <leader>cw :call CleanWhitespace()<CR>

" Function to toggle between tabs and spaces
function! ToggleTabSpaces()
    if &expandtab
        set noexpandtab
        echo "Using tabs"
    else
        set expandtab
        echo "Using spaces"
    endif
endfunction
nnoremap <leader>ts :call ToggleTabSpaces()<CR>

" =============================================================================
" LOAD CUSTOM CONFIGURATIONS
" =============================================================================

" Load user-specific customizations if they exist
try
  source ~/.vim_runtime/my_configs.vim
catch
endtry

" Load additional custom configurations
try
  source ~/.vim_runtime/custom_configs.vim
catch
endtry